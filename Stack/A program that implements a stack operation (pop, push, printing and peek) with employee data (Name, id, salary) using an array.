#include <iostream>
#include <string>

struct Employee {
    std::string name;
    int id;
    double salary;
};

class EmployeeStack {
private:
    int capacity;
    int top;
    Employee* stack;

public:
    // Constructor
    EmployeeStack(int size) {
        capacity = size;
        top = -1;
        stack = new Employee[capacity];
    }

    // Method to check if the stack is empty
    bool isEmpty() const {
        return top == -1;
    }

    // Method to check if the stack is full
    bool isFull() const {
        return top == capacity - 1;
    }

    // Method to push an employee onto the stack
    void push(const std::string& name, int id, double salary) {
        if (isFull()) {
            std::cout << "Stack is full. Cannot push more employees.\n";
            return;
        }
        top++;
        stack[top] = {name, id, salary};
        std::cout << "Employee " << name << " added to stack.\n";
    }

    // Method to pop an employee from the stack
    void pop() {
        if (isEmpty()) {
            std::cout << "Stack is empty. Cannot pop.\n";
            return;
        }
        Employee emp = stack[top];
        top--;
        std::cout << "Employee " << emp.name << " removed from stack.\n";
    }

    // Method to peek at the top employee
    Employee peek() const {
        if (isEmpty()) {
            std::cout << "Stack is empty. No top element.\n";
            return {"", -1, 0.0};  // Return a dummy employee
        }
        return stack[top];
    }

    // Method to print the stack contents
    void printStack() const {
        if (isEmpty()) {
            std::cout << "Stack is empty.\n";
            return;
        }
        std::cout << "Stack contents:\n";
        for (int i = top; i >= 0; i--) {
            std::cout << "Name: " << stack[i].name << ", ID: " << stack[i].id << ", Salary: " << stack[i].salary << '\n';
        }
    }
};

int main() {
    EmployeeStack stack(5);
    stack.push("Apatrna", 101, 50000);
    stack.push("Jay", 102, 55000);
    stack.push("Charu", 103, 60000);

    stack.printStack();

    Employee topEmployee = stack.peek();
    std::cout << "Top employee: Name: " << topEmployee.name << ", ID: " << topEmployee.id << ", Salary: " << topEmployee.salary << '\n';

    stack.pop();
    stack.printStack();

    // Manually delete the stack array to prevent memory leak
    delete[] stack.stack;

    return 0;
}
